{"ast":null,"code":"import _asyncToGenerator from \"/Users/avinavshrestha/Desktop/INKU/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter, VERSION } from '@angular/core';\nimport { ResultPopupComponent } from './result-popup/result-popup.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/services/tracker/tracker.service\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/router\";\nconst _c0 = [\"fileInput\"];\nconst _c1 = [\"previewImg\"];\n\nfunction DetectDiseaseComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelementStart(1, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function DetectDiseaseComponent_div_18_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.predictEvt.emit();\n    });\n    i0.ɵɵtext(2, \" Predict \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = function () {\n  return [\"/appointments\"];\n};\n\nexport class DetectDiseaseComponent {\n  constructor(dialog, trackerService) {\n    this.dialog = dialog;\n    this.trackerService = trackerService;\n    this.name = 'Angular ' + VERSION.major; //fileAttr is the name of the file to be displayed\n\n    this.fileAttr = 'Choose File'; //creating an instance of predictEvt event emitter - continued in ngAfterViewInit()\n\n    this.predictEvt = new EventEmitter();\n  }\n\n  ngOnInit() {\n    //loading model on init\n    this.classifier = ml5.imageClassifier('assets/model/skin-diseases/' + 'model.json');\n  } //called when input is changed - ie. an image is uploaded\n  //imgFile is the $event passed from the html file\n\n\n  uploadFileEvt(imgFile) {\n    //if the image exists\n    if (imgFile.target.files && imgFile.target.files[0]) {\n      this.fileAttr = ''; //appending the name of the file to fileAttr for display\n\n      Array.from(imgFile.target.files).forEach(file => {\n        this.fileAttr += file.name;\n      }); // HTML5 FileReader API\n\n      let reader = new FileReader();\n\n      reader.onload = e => {\n        let image = new Image();\n        image.src = e.target.result; //image reader onload\n\n        image.onload = rs => {\n          let imgBase64Path = e.target.result;\n          this.dataimage = imgBase64Path;\n        };\n      }; //reading as dataURL - to be called after creating a reader\n\n\n      reader.readAsDataURL(imgFile.target.files[0]); // Reset if duplicate image uploaded again\n\n      this.fileInput.nativeElement.value = '';\n    } //if image not found\n    else {\n        this.fileAttr = 'Choose File';\n      }\n  }\n\n  ngAfterViewInit() {\n    var _this = this;\n\n    //emitting the prdictEvt event\n    this.predictEvt.emit(); //subscribing to the changes produced - button click in this case\n\n    this.predictEvt.subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n      //ml5 function to classify the image - takes the image element and a callback function\n      let dialogRef = _this.dialog.open(ResultPopupComponent, {\n        data: null\n      });\n\n      yield _this.classifier.classify(_this.previewImg.nativeElement, (error, results) => {\n        if (error) {\n          console.error(error);\n          return;\n        } //setting the values to be transferred to the dialog\n\n\n        _this.confidenceOnDisease = (results[0].confidence * 100).toFixed(2);\n        _this.labelOfDisease = results[0].label; //if dialog reference exists, update the predictionData element which is present in the popup\n\n        if (dialogRef && dialogRef.componentInstance) {\n          dialogRef.componentInstance.predictionData = {\n            disease: _this.labelOfDisease.toUpperCase(),\n            confidence: _this.confidenceOnDisease\n          };\n        }\n\n        dialogRef.afterClosed().subscribe(result => {\n          if (result) {\n            _this.trackerService.addingDisease(_this.labelOfDisease, _this.confidenceOnDisease);\n          }\n        });\n      });\n    }), err => console.error(err)); //log errors if any\n  }\n\n}\n\nDetectDiseaseComponent.ɵfac = function DetectDiseaseComponent_Factory(t) {\n  return new (t || DetectDiseaseComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.TrackerService));\n};\n\nDetectDiseaseComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DetectDiseaseComponent,\n  selectors: [[\"app-detect-disease\"]],\n  viewQuery: function DetectDiseaseComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.previewImg = _t.first);\n    }\n  },\n  decls: 23,\n  vars: 5,\n  consts: [[1, \"upload_image\"], [1, \"card\"], [1, \"heading\"], [1, \"card-body\", \"d-flex\", \"justify-content-center\"], [\"matInput\", \"\", \"readonly\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-flat-button\", \"\"], [\"type\", \"file\", \"id\", \"uploadFile\", \"name\", \"uploadFile\", \"accept\", \"image/*\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"card-footer\"], [3, \"src\"], [\"previewImg\", \"\"], [\"class\", \"predict-btn-div\", 4, \"ngIf\"], [1, \"alert-customer\"], [\"href\", \"#\", \"routerLinkActive\", \"router-link-active\", 1, \"btn\", 3, \"routerLink\"], [1, \"fas\", \"fa-chevron-right\"], [1, \"predict-btn-div\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function DetectDiseaseComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"Detect \");\n      i0.ɵɵelementStart(4, \"span\");\n      i0.ɵɵtext(5, \"Diseases\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 3);\n      i0.ɵɵelementStart(7, \"mat-form-field\");\n      i0.ɵɵelementStart(8, \"div\");\n      i0.ɵɵelementStart(9, \"mat-toolbar\");\n      i0.ɵɵelementStart(10, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function DetectDiseaseComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.fileAttr = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 5);\n      i0.ɵɵtext(12, \" Browse File \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 6, 7);\n      i0.ɵɵlistener(\"change\", function DetectDiseaseComponent_Template_input_change_13_listener($event) {\n        return ctx.uploadFileEvt($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 8);\n      i0.ɵɵelement(16, \"img\", 9, 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, DetectDiseaseComponent_div_18_Template, 3, 0, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"section\", 12);\n      i0.ɵɵelementStart(20, \"a\", 13);\n      i0.ɵɵtext(21, \" See a Doctor \");\n      i0.ɵɵelement(22, \"span\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngModel\", ctx.fileAttr);\n      i0.ɵɵadvance(6);\n      i0.ɵɵpropertyInterpolate(\"src\", ctx.dataimage, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.dataimage);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(4, _c2));\n    }\n  },\n  directives: [i3.MatFormField, i4.MatToolbar, i5.MatInput, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgModel, i7.MatButton, i8.NgIf, i9.RouterLinkWithHref, i9.RouterLinkActive],\n  styles: [\".btn[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  margin-top: 1rem;\\n  padding: 0.5rem;\\n  padding-left: 1rem;\\n  border: 0.2rem solid #0288d1;\\n  border-radius: 0.5rem;\\n  box-shadow: 0.5rem 0.5rem 0 rgba(31, 22, 160, 0.2);\\n  color: #0288d1;\\n  cursor: pointer;\\n  font-size: 1.7rem;\\n  background: #fff;\\n}\\n\\n.btn[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n  padding: 0.7rem 1rem;\\n  border-radius: 0.5rem;\\n  background: #0288d1;\\n  color: #fff;\\n  margin-left: 0.5rem;\\n}\\n\\n.btn[_ngcontent-%COMP%]:hover {\\n  background: #0288d1;\\n  color: #fff;\\n}\\n\\n.btn[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%] {\\n  color: #0288d1;\\n  background: #fff;\\n  margin-left: 1rem;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  margin: 40px 0;\\n}\\n\\n.mat-toolbar-single-row[_ngcontent-%COMP%] {\\n  height: auto !important;\\n  background: transparent;\\n}\\n\\n.mat-toolbar-single-row[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  width: 200px;\\n  background-color: #6794ef;\\n  color: #fff;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  width: 80%;\\n}\\n\\n#uploadFile[_ngcontent-%COMP%] {\\n  top: 0px;\\n  left: 0px;\\n  width: 100%;\\n  z-index: 9;\\n  opacity: 0;\\n  height: 100%;\\n  cursor: pointer;\\n  position: absolute;\\n}\\n\\n.card-footer[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n.card-footer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  max-width: 50%;\\n  width: 50%;\\n}\\n\\n.predict-btn-div[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n}\\n\\n.top-heading[_ngcontent-%COMP%] {\\n  font-size: 2rem;\\n  text-align: center;\\n  margin-top: 1rem;\\n}\\n\\n.heading[_ngcontent-%COMP%] {\\n  text-align: center;\\n  padding: 2rem;\\n  padding-bottom: 2rem;\\n  text-shadow: 0.4rem 0.4rem 0 rgba(0, 0, 0, 0.2);\\n  text-transform: uppercase;\\n  color: #444;\\n  font-size: 3rem;\\n  font-weight: bold;\\n  letter-spacing: 0.4rem;\\n}\\n\\n.heading[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n  text-transform: uppercase;\\n  color: #0288d1;\\n}\\n\\n@media (max-width: 1024px) {\\n  .card-footer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n    max-width: 95%;\\n    width: 95%;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRldGVjdC1kaXNlYXNlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLDRCQUE0QjtFQUM1QixxQkFBcUI7RUFDckIsa0RBQWtEO0VBQ2xELGNBQWM7RUFDZCxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG9CQUFvQjtFQUNwQixxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsV0FBVztBQUNiOztBQUVBO0VBQ0UsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsdUJBQXVCO0VBQ3ZCLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLFlBQVk7RUFDWix5QkFBeUI7RUFDekIsV0FBVztBQUNiOztBQUVBO0VBQ0UsVUFBVTtBQUNaOztBQUVBO0VBQ0UsUUFBUTtFQUNSLFNBQVM7RUFDVCxXQUFXO0VBQ1gsVUFBVTtFQUNWLFVBQVU7RUFDVixZQUFZO0VBQ1osZUFBZTtFQUNmLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7QUFDekI7O0FBQ0E7RUFDRSxjQUFjO0VBQ2QsVUFBVTtBQUNaOztBQUNBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixnQkFBZ0I7QUFDbEI7O0FBQ0E7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGdCQUFnQjtBQUNsQjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isb0JBQW9CO0VBQ3BCLCtDQUErQztFQUMvQyx5QkFBeUI7RUFDekIsV0FBVztFQUNYLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGNBQWM7QUFDaEI7O0FBQ0E7RUFDRTtJQUNFLGNBQWM7SUFDZCxVQUFVO0VBQ1o7QUFDRiIsImZpbGUiOiJkZXRlY3QtZGlzZWFzZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uYnRuIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW4tdG9wOiAxcmVtO1xuICBwYWRkaW5nOiAwLjVyZW07XG4gIHBhZGRpbmctbGVmdDogMXJlbTtcbiAgYm9yZGVyOiAwLjJyZW0gc29saWQgIzAyODhkMTtcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xuICBib3gtc2hhZG93OiAwLjVyZW0gMC41cmVtIDAgcmdiYSgzMSwgMjIsIDE2MCwgMC4yKTtcbiAgY29sb3I6ICMwMjg4ZDE7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1zaXplOiAxLjdyZW07XG4gIGJhY2tncm91bmQ6ICNmZmY7XG59XG5cbi5idG4gc3BhbiB7XG4gIHBhZGRpbmc6IDAuN3JlbSAxcmVtO1xuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XG4gIGJhY2tncm91bmQ6ICMwMjg4ZDE7XG4gIGNvbG9yOiAjZmZmO1xuICBtYXJnaW4tbGVmdDogMC41cmVtO1xufVxuXG4uYnRuOmhvdmVyIHtcbiAgYmFja2dyb3VuZDogIzAyODhkMTtcbiAgY29sb3I6ICNmZmY7XG59XG5cbi5idG46aG92ZXIgc3BhbiB7XG4gIGNvbG9yOiAjMDI4OGQxO1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBtYXJnaW4tbGVmdDogMXJlbTtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgbWFyZ2luOiA0MHB4IDA7XG59XG5cbi5tYXQtdG9vbGJhci1zaW5nbGUtcm93IHtcbiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4ubWF0LXRvb2xiYXItc2luZ2xlLXJvdyBidXR0b24ge1xuICB3aWR0aDogMjAwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICM2Nzk0ZWY7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogODAlO1xufVxuXG4jdXBsb2FkRmlsZSB7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICB6LWluZGV4OiA5O1xuICBvcGFjaXR5OiAwO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xufVxuXG4uY2FyZC1mb290ZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cbi5jYXJkLWZvb3RlciBpbWcge1xuICBtYXgtd2lkdGg6IDUwJTtcbiAgd2lkdGg6IDUwJTtcbn1cbi5wcmVkaWN0LWJ0bi1kaXYge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMjBweDtcbn1cbi50b3AtaGVhZGluZyB7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAxcmVtO1xufVxuLmhlYWRpbmcge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDJyZW07XG4gIHBhZGRpbmctYm90dG9tOiAycmVtO1xuICB0ZXh0LXNoYWRvdzogMC40cmVtIDAuNHJlbSAwIHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgY29sb3I6ICM0NDQ7XG4gIGZvbnQtc2l6ZTogM3JlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGxldHRlci1zcGFjaW5nOiAwLjRyZW07XG59XG5cbi5oZWFkaW5nIHNwYW4ge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjb2xvcjogIzAyODhkMTtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgLmNhcmQtZm9vdGVyIGltZyB7XG4gICAgbWF4LXdpZHRoOiA5NSU7XG4gICAgd2lkdGg6IDk1JTtcbiAgfVxufVxuIl19 */\"]\n});","map":{"version":3,"sources":["/Users/avinavshrestha/Desktop/INKU/src/app/customComponents/detect-disease/detect-disease.component.ts","/Users/avinavshrestha/Desktop/INKU/src/app/customComponents/detect-disease/detect-disease.component.html"],"names":[],"mappings":";AAAA,SAAqB,YAArB,EAAmC,OAAnC,QAA6D,eAA7D;AAIA,SAAS,oBAAT,QAAqC,uCAArC;;;;;;;;;;;;;;;;;;ACuBI,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AAEI,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,EAAA;AAAwC,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,8DAAA,GAAA;AAAA,MAAA,EAAA,CAAA,aAAA,CAAA,GAAA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAS,MAAA,CAAA,UAAA,CAAA,IAAA,EAAT;AAA0B,KAA1B;AACpC,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,WAAA;AACJ,IAAA,EAAA,CAAA,YAAA;AACJ,IAAA,EAAA,CAAA,YAAA;;;;;;;;ADnBJ,OAAM,MAAO,sBAAP,CAA6B;AAWjC,EAAA,WAAA,CACS,MADT,EAEU,cAFV,EAEwC;AAD/B,SAAA,MAAA,GAAA,MAAA;AACC,SAAA,cAAA,GAAA,cAAA;AAaV,SAAA,IAAA,GAAO,aAAa,OAAO,CAAC,KAA5B,CAbwC,CAqBxC;;AACA,SAAA,QAAA,GAAW,aAAX,CAtBwC,CAEtC;;AACA,SAAK,UAAL,GAAkB,IAAI,YAAJ,EAAlB;AACD;;AAED,EAAA,QAAQ,GAAA;AACN;AACA,SAAK,UAAL,GAAkB,GAAG,CAAC,eAAJ,CAChB,gCAAgC,YADhB,CAAlB;AAGD,GAxBgC,CAqCjC;AACA;;;AACA,EAAA,aAAa,CAAC,OAAD,EAAa;AACxB;AACA,QAAI,OAAO,CAAC,MAAR,CAAe,KAAf,IAAwB,OAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,CAArB,CAA5B,EAAqD;AACnD,WAAK,QAAL,GAAgB,EAAhB,CADmD,CAGnD;;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,MAAR,CAAe,KAA1B,EAAiC,OAAjC,CAA0C,IAAD,IAAc;AACrD,aAAK,QAAL,IAAiB,IAAI,CAAC,IAAtB;AACD,OAFD,EAJmD,CAQnD;;AACA,UAAI,MAAM,GAAG,IAAI,UAAJ,EAAb;;AACA,MAAA,MAAM,CAAC,MAAP,GAAiB,CAAD,IAAW;AACzB,YAAI,KAAK,GAAG,IAAI,KAAJ,EAAZ;AACA,QAAA,KAAK,CAAC,GAAN,GAAY,CAAC,CAAC,MAAF,CAAS,MAArB,CAFyB,CAIzB;;AACA,QAAA,KAAK,CAAC,MAAN,GAAgB,EAAD,IAAO;AACpB,cAAI,aAAa,GAAG,CAAC,CAAC,MAAF,CAAS,MAA7B;AACA,eAAK,SAAL,GAAiB,aAAjB;AACD,SAHD;AAID,OATD,CAVmD,CAqBnD;;;AACA,MAAA,MAAM,CAAC,aAAP,CAAqB,OAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,CAArB,CAArB,EAtBmD,CAwBnD;;AACA,WAAK,SAAL,CAAe,aAAf,CAA6B,KAA7B,GAAqC,EAArC;AACD,KA1BD,CA4BA;AA5BA,SA6BK;AACH,aAAK,QAAL,GAAgB,aAAhB;AACD;AACF;;AAED,EAAA,eAAe,GAAA;AAAA;;AACb;AACA,SAAK,UAAL,CAAgB,IAAhB,GAFa,CAIb;;AACA,SAAK,UAAL,CAAgB,SAAhB,iCAA0B,aAAW;AACjC;AACF,UAAI,SAAS,GAAG,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,oBAAjB,EAAuC;AACrD,QAAA,IAAI,EAAE;AAD+C,OAAvC,CAAhB;;AAGE,YAAM,KAAI,CAAC,UAAL,CAAgB,QAAhB,CAAyB,KAAI,CAAC,UAAL,CAAgB,aAAzC,EAAwD,CAAC,KAAD,EAAa,OAAb,KAA6B;AACvF,YAAI,KAAJ,EAAW;AACT,UAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACA;AACD,SAJsF,CAMvF;;;AACA,QAAA,KAAI,CAAC,mBAAL,GAA2B,CAAC,OAAO,CAAC,CAAD,CAAP,CAAW,UAAX,GAAwB,GAAzB,EAA8B,OAA9B,CAAsC,CAAtC,CAA3B;AACA,QAAA,KAAI,CAAC,cAAL,GAAsB,OAAO,CAAC,CAAD,CAAP,CAAW,KAAjC,CARuF,CAUvF;;AACA,YAAG,SAAS,IAAI,SAAS,CAAC,iBAA1B,EAA4C;AAC1C,UAAA,SAAS,CAAC,iBAAV,CAA4B,cAA5B,GAA6C;AAC3C,YAAA,OAAO,EAAE,KAAI,CAAC,cAAL,CAAoB,WAApB,EADkC;AAE3C,YAAA,UAAU,EAAE,KAAI,CAAC;AAF0B,WAA7C;AAID;;AAED,QAAA,SAAS,CAAC,WAAV,GAAwB,SAAxB,CAAmC,MAAD,IAAW;AAC3C,cAAI,MAAJ,EAAY;AACV,YAAA,KAAI,CAAC,cAAL,CAAoB,aAApB,CACE,KAAI,CAAC,cADP,EAEE,KAAI,CAAC,mBAFP;AAID;AACF,SAPD;AAQD,OA1BG,CAAN;AA4BD,KAjCH,GAkCG,GAAD,IAAgB,OAAO,CAAC,KAAR,CAAc,GAAd,CAlClB,EALa,CAwCV;AACJ;;AApHgC;;;mBAAtB,sB,EAAsB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,SAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,cAAA,C;AAAA,C;;;QAAtB,sB;AAAsB,EAAA,SAAA,EAAA,CAAA,CAAA,oBAAA,CAAA,C;AAAA,EAAA,SAAA,EAAA,SAAA,4BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;ACbnC,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA;AAEA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACI,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA;AAAoB,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA;AAAO,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA;AAAM,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,UAAA;AAAQ,MAAA,EAAA,CAAA,YAAA;AAAO,MAAA,EAAA,CAAA,YAAA;AAChD,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACI,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,gBAAA;AACI,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA;AACI,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,aAAA;AAEI,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,EAAA,CAAA;AAAgB,MAAA,EAAA,CAAA,UAAA,CAAA,eAAA,EAAA,SAAA,+DAAA,CAAA,MAAA,EAAA;AAAA,eAAA,GAAA,CAAA,QAAA,GAAA,MAAA;AAAA,OAAA;AAAhB,MAAA,EAAA,CAAA,YAAA;AAGA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,CAAA;AACI,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,eAAA;AACJ,MAAA,EAAA,CAAA,YAAA;AACJ,MAAA,EAAA,CAAA,YAAA;AAGA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;AAA8C,MAAA,EAAA,CAAA,UAAA,CAAA,QAAA,EAAA,SAAA,wDAAA,CAAA,MAAA,EAAA;AAAA,eAAU,GAAA,CAAA,aAAA,CAAA,MAAA,CAAV;AAA+B,OAA/B;AAA9C,MAAA,EAAA,CAAA,YAAA;AACJ,MAAA,EAAA,CAAA,YAAA;AACJ,MAAA,EAAA,CAAA,YAAA;AACJ,MAAA,EAAA,CAAA,YAAA;AAEA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACI,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA;AACJ,MAAA,EAAA,CAAA,YAAA;AAEA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,sCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AAMJ,MAAA,EAAA,CAAA,YAAA;AAEA,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,EAAA,EAAA;AACI,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA;AAMA,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,gBAAA;AAAa,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA;AACf,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;;;;AApCoC,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,QAAA;AAevB,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,qBAAA,CAAA,KAAA,EAAA,GAAA,CAAA,SAAA,EAAA,EAAA,CAAA,aAAA;AAGH,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,GAAA,CAAA,SAAA;AAaN,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,YAAA,EAAA,EAAA,CAAA,eAAA,CAAA,CAAA,EAAA,GAAA,CAAA","sourcesContent":["import { ElementRef, EventEmitter, VERSION, ViewChild } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TrackerService } from 'src/app/services/tracker/tracker.service';\nimport { ResultPopupComponent } from './result-popup/result-popup.component';\n\ndeclare const ml5: any;\n\n@Component({\n  selector: 'app-detect-disease',\n  templateUrl: './detect-disease.component.html',\n  styleUrls: ['./detect-disease.component.css'],\n})\nexport class DetectDiseaseComponent implements OnInit {\n  //event emitter to predict results\n  public predictEvt!: EventEmitter<void>;\n\n  //classifier varaible that loads the model\n  classifier: any;\n\n  //confidence and label of the prediction\n  confidenceOnDisease: any;\n  labelOfDisease: any;\n\n  constructor(\n    public dialog: MatDialog,\n    private trackerService: TrackerService\n  ) {\n    //creating an instance of predictEvt event emitter - continued in ngAfterViewInit()\n    this.predictEvt = new EventEmitter<void>();\n  }\n\n  ngOnInit(): void {\n    //loading model on init\n    this.classifier = ml5.imageClassifier(\n      'assets/model/skin-diseases/' + 'model.json'\n    );\n  }\n\n  name = 'Angular ' + VERSION.major;\n  dataimage: any;\n\n  //selecting the HTML input element\n  @ViewChild('fileInput') fileInput!: ElementRef;\n\n  @ViewChild('previewImg') previewImg!: ElementRef;\n\n  //fileAttr is the name of the file to be displayed\n  fileAttr = 'Choose File';\n\n  //called when input is changed - ie. an image is uploaded\n  //imgFile is the $event passed from the html file\n  uploadFileEvt(imgFile: any) {\n    //if the image exists\n    if (imgFile.target.files && imgFile.target.files[0]) {\n      this.fileAttr = '';\n\n      //appending the name of the file to fileAttr for display\n      Array.from(imgFile.target.files).forEach((file: any) => {\n        this.fileAttr += file.name;\n      });\n\n      // HTML5 FileReader API\n      let reader = new FileReader();\n      reader.onload = (e: any) => {\n        let image = new Image();\n        image.src = e.target.result;\n\n        //image reader onload\n        image.onload = (rs) => {\n          let imgBase64Path = e.target.result;\n          this.dataimage = imgBase64Path;\n        };\n      };\n\n      //reading as dataURL - to be called after creating a reader\n      reader.readAsDataURL(imgFile.target.files[0]);\n\n      // Reset if duplicate image uploaded again\n      this.fileInput.nativeElement.value = '';\n    }\n\n    //if image not found\n    else {\n      this.fileAttr = 'Choose File';\n    }\n  }\n\n  ngAfterViewInit() {\n    //emitting the prdictEvt event\n    this.predictEvt.emit();\n\n    //subscribing to the changes produced - button click in this case\n    this.predictEvt.subscribe(async () => {\n        //ml5 function to classify the image - takes the image element and a callback function\n      let dialogRef = this.dialog.open(ResultPopupComponent, {\n        data: null\n      });\n        await this.classifier.classify(this.previewImg.nativeElement, (error: any, results: any) => {\n            if (error) {\n              console.error(error);\n              return;\n            }\n\n            //setting the values to be transferred to the dialog\n            this.confidenceOnDisease = (results[0].confidence * 100).toFixed(2);\n            this.labelOfDisease = results[0].label;\n\n            //if dialog reference exists, update the predictionData element which is present in the popup\n            if(dialogRef && dialogRef.componentInstance){\n              dialogRef.componentInstance.predictionData = {\n                disease: this.labelOfDisease.toUpperCase(),\n                confidence: this.confidenceOnDisease\n              }\n            }\n\n            dialogRef.afterClosed().subscribe((result) => {\n              if (result) {\n                this.trackerService.addingDisease(\n                  this.labelOfDisease,\n                  this.confidenceOnDisease\n                );\n              }\n            });\n          }\n        );\n      },\n      (err: Error) => console.error(err)\n    ); //log errors if any\n  }\n}\n","<section class=\"upload_image\">\n\n<div class=\"card\">\n    <h1 class=\"heading\">Detect <span>Diseases</span></h1>\n    <div class=\"card-body d-flex justify-content-center\">\n        <mat-form-field>\n            <div>\n                <mat-toolbar>\n                    <!-- Display files names -->\n                    <input matInput [(ngModel)]=\"fileAttr\" readonly/>\n\n                    <!-- Browse Button -->\n                    <button mat-flat-button>\n                        Browse File\n                    </button>\n                </mat-toolbar>\n\n                <!-- Fetch selected filed on change -->\n                <input type=\"file\" #fileInput id=\"uploadFile\" (change)=\"uploadFileEvt($event)\" name=\"uploadFile\" accept=\"image/*\" />\n            </div>\n        </mat-form-field>\n    </div>\n\n    <div class=\"card-footer\">\n        <img src=\"{{ dataimage }}\" #previewImg>\n    </div>\n\n    <div *ngIf=\"dataimage\" class=\"predict-btn-div\">\n        <!--Emitting the event on click-->\n        <button mat-flat-button color=\"primary\" (click)=\"predictEvt.emit()\">\n            Predict\n        </button>\n    </div>\n</div>\n\n</section>\n<section class=\"alert-customer\">\n    <a\n    href=\"#\"\n    class=\"btn\"\n    [routerLink]=\"['/appointments']\"\n    routerLinkActive=\"router-link-active\"\n  >\n    See a Doctor <span class=\"fas fa-chevron-right\"></span>\n  </a>\n</section>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}