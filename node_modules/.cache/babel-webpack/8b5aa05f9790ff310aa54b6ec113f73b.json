{"ast":null,"code":"import _asyncToGenerator from \"/Users/savibpandey/INKU/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter, VERSION } from '@angular/core';\nimport { DialogPopupComponent } from './dialog-popup/dialog-popup.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/toolbar\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/common\";\nconst _c0 = [\"fileInput\"];\nconst _c1 = [\"previewImg\"];\n\nfunction DarkCirclesComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelementStart(1, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function DarkCirclesComponent_div_15_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.predictEvt.emit();\n    });\n    i0.ɵɵtext(2, \" Predict \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class DarkCirclesComponent {\n  constructor(dialog) {\n    this.dialog = dialog;\n    this.name = 'Angular ' + VERSION.major; //fileAttr is the name of the file to be displayed\n\n    this.fileAttr = 'Choose File'; //creating an instance of predictEvt event emitter - continued in ngAfterViewInit()\n\n    this.predictEvt = new EventEmitter();\n  }\n\n  ngOnInit() {\n    //loading model on init\n    this.classifier = ml5.imageClassifier('assets/model/dark-circles/' + 'model.json');\n  } //called when input is changed - ie. an image is uploaded\n  //imgFile is the $event passed from the html file\n\n\n  uploadFileEvt(imgFile) {\n    //if the image exists\n    if (imgFile.target.files && imgFile.target.files[0]) {\n      this.fileAttr = ''; //appending the name of the file to fileAttr for display \n\n      Array.from(imgFile.target.files).forEach(file => {\n        this.fileAttr += file.name;\n      }); // HTML5 FileReader API\n\n      let reader = new FileReader();\n\n      reader.onload = e => {\n        let image = new Image();\n        image.src = e.target.result; //image reader onload\n\n        image.onload = rs => {\n          let imgBase64Path = e.target.result;\n          this.dataimage = imgBase64Path;\n        };\n      }; //reading as dataURL - to be called after creating a reader\n\n\n      reader.readAsDataURL(imgFile.target.files[0]); // Reset if duplicate image uploaded again\n\n      this.fileInput.nativeElement.value = \"\";\n    } //if image not found\n    else {\n        this.fileAttr = 'Choose File';\n      }\n  }\n\n  ngAfterViewInit() {\n    var _this = this;\n\n    //emitting the prdictEvt event\n    this.predictEvt.emit(); //subscribing to the changes produced - button click in this case\n\n    this.predictEvt.subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n      let dialogRef = _this.dialog.open(DialogPopupComponent, {\n        data: null\n      }); //ml5 function to classify the image - takes the image element and a callback function\n\n\n      yield _this.classifier.classify(_this.previewImg.nativeElement, (error, results) => {\n        if (error) {\n          console.error(error);\n          return;\n        } //setting tha values to be transferred to the dialog \n\n\n        _this.confidenceOnPrediction = (results[0].confidence * 100).toFixed(2);\n        _this.labelOfPrediction = results[0].label; //if dialog reference exists, update the predictionData element which is present in the popup\n\n        if (dialogRef && dialogRef.componentInstance) {\n          dialogRef.componentInstance.predictionData = {\n            disease: _this.labelOfPrediction.toUpperCase(),\n            confidence: _this.confidenceOnPrediction\n          };\n        }\n\n        dialogRef.afterClosed().subscribe(result => {});\n      });\n    }), err => console.error(err)); //log errors if any\n  }\n\n}\n\nDarkCirclesComponent.ɵfac = function DarkCirclesComponent_Factory(t) {\n  return new (t || DarkCirclesComponent)(i0.ɵɵdirectiveInject(i1.MatDialog));\n};\n\nDarkCirclesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DarkCirclesComponent,\n  selectors: [[\"app-dark-circles\"]],\n  viewQuery: function DarkCirclesComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.previewImg = _t.first);\n    }\n  },\n  decls: 16,\n  vars: 3,\n  consts: [[1, \"card\"], [1, \"top-heading\"], [1, \"card-body\", \"d-flex\", \"justify-content-center\"], [\"matInput\", \"\", \"readonly\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-flat-button\", \"\"], [\"type\", \"file\", \"id\", \"uploadFile\", \"name\", \"uploadFile\", \"accept\", \"image/*\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"card-footer\"], [3, \"src\"], [\"previewImg\", \"\"], [\"class\", \"predict-btn-div\", 4, \"ngIf\"], [1, \"predict-btn-div\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function DarkCirclesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Upload Image\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵelementStart(4, \"mat-form-field\");\n      i0.ɵɵelementStart(5, \"div\");\n      i0.ɵɵelementStart(6, \"mat-toolbar\");\n      i0.ɵɵelementStart(7, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function DarkCirclesComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.fileAttr = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵtext(9, \" Browse File \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 5, 6);\n      i0.ɵɵlistener(\"change\", function DarkCirclesComponent_Template_input_change_10_listener($event) {\n        return ctx.uploadFileEvt($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 7);\n      i0.ɵɵelement(13, \"img\", 8, 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, DarkCirclesComponent_div_15_Template, 3, 0, \"div\", 10);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.fileAttr);\n      i0.ɵɵadvance(6);\n      i0.ɵɵpropertyInterpolate(\"src\", ctx.dataimage, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.dataimage);\n    }\n  },\n  directives: [i2.MatFormField, i3.MatToolbar, i4.MatInput, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i6.MatButton, i7.NgIf],\n  styles: [\".mat-form-field[_ngcontent-%COMP%] {\\n    margin: 40px 0;\\n}\\n\\n.mat-toolbar-single-row[_ngcontent-%COMP%] {\\n    height: auto !important;\\n    background: transparent;\\n}\\n\\n.mat-toolbar-single-row[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n    width: 200px;\\n    background: #6794ef;\\n    color: #fff;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n    width: 80%;\\n}\\n\\n.top-heading[_ngcontent-%COMP%]{\\n    font-size: 2rem;\\n    text-align: center;\\n    margin-top: 1rem;\\n}\\n\\n#uploadFile[_ngcontent-%COMP%] {\\n    top: 0px;\\n    left: 0px;\\n    width: 100%;    \\n    z-index: 9;\\n    opacity: 0;\\n    height: 100%;\\n    cursor: pointer;\\n    position: absolute;\\n}\\n\\n.card-footer[_ngcontent-%COMP%]{\\n    display: flex;\\n    justify-content: center;\\n}\\n\\n.card-footer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{\\n    max-width: 50%;\\n    width: 50%;\\n}\\n\\n.predict-btn-div[_ngcontent-%COMP%]{\\n    display: flex;\\n    justify-content: center;\\n    margin-top: 20px;\\n}\\n\\n@media (max-width: 1024px){\\n    .card-footer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{\\n        max-width: 95%;\\n        width: 95%;\\n    }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhcmstY2lyY2xlcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2Qix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixZQUFZO0lBQ1osZUFBZTtJQUNmLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7QUFDM0I7O0FBQ0E7SUFDSSxjQUFjO0lBQ2QsVUFBVTtBQUNkOztBQUNBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSTtRQUNJLGNBQWM7UUFDZCxVQUFVO0lBQ2Q7QUFDSiIsImZpbGUiOiJkYXJrLWNpcmNsZXMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtZm9ybS1maWVsZCB7XG4gICAgbWFyZ2luOiA0MHB4IDA7XG59XG5cbi5tYXQtdG9vbGJhci1zaW5nbGUtcm93IHtcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLm1hdC10b29sYmFyLXNpbmdsZS1yb3cgYnV0dG9uIHtcbiAgICB3aWR0aDogMjAwcHg7XG4gICAgYmFja2dyb3VuZDogIzY3OTRlZjtcbiAgICBjb2xvcjogI2ZmZjtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgICB3aWR0aDogODAlO1xufVxuXG4udG9wLWhlYWRpbmd7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xufVxuXG4jdXBsb2FkRmlsZSB7XG4gICAgdG9wOiAwcHg7XG4gICAgbGVmdDogMHB4O1xuICAgIHdpZHRoOiAxMDAlOyAgICBcbiAgICB6LWluZGV4OiA5O1xuICAgIG9wYWNpdHk6IDA7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG5cbi5jYXJkLWZvb3RlcntcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuLmNhcmQtZm9vdGVyIGltZ3tcbiAgICBtYXgtd2lkdGg6IDUwJTtcbiAgICB3aWR0aDogNTAlO1xufVxuLnByZWRpY3QtYnRuLWRpdntcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIG1hcmdpbi10b3A6IDIwcHg7XG59XG5AbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KXtcbiAgICAuY2FyZC1mb290ZXIgaW1ne1xuICAgICAgICBtYXgtd2lkdGg6IDk1JTtcbiAgICAgICAgd2lkdGg6IDk1JTtcbiAgICB9XG59Il19 */\"]\n});","map":{"version":3,"sources":["/Users/savibpandey/INKU/src/app/customComponents/dark-circles/dark-circles.component.ts","/Users/savibpandey/INKU/src/app/customComponents/dark-circles/dark-circles.component.html"],"names":[],"mappings":"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","sourcesContent":["import { ElementRef, EventEmitter, VERSION, ViewChild } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogPopupComponent } from './dialog-popup/dialog-popup.component';\n\ndeclare const ml5: any\n\n@Component({\n  selector: 'app-dark-circles',\n  templateUrl: './dark-circles.component.html',\n  styleUrls: ['./dark-circles.component.css']\n})\nexport class DarkCirclesComponent implements OnInit {\n\n  //event emitter to predict results\n  public predictEvt!: EventEmitter<void>;\n\n  //classifier varaible that loads the model\n  classifier: any\n\n  //confidence and label of the prediction\n  confidenceOnPrediction: any\n  labelOfPrediction: any\n\n  constructor(public dialog: MatDialog) {\n\n    //creating an instance of predictEvt event emitter - continued in ngAfterViewInit()\n    this.predictEvt = new EventEmitter<void>();\n  }\n\n  ngOnInit(): void {\n    //loading model on init\n    this.classifier = ml5.imageClassifier('assets/model/dark-circles/' + 'model.json')\n  }\n\n  name = 'Angular ' + VERSION.major;\n  dataimage: any;\n\n  //selecting the HTML input element\n  @ViewChild('fileInput') fileInput!: ElementRef;\n\n  @ViewChild('previewImg') previewImg!: ElementRef;\n\n  //fileAttr is the name of the file to be displayed\n  fileAttr = 'Choose File';\n\n  //called when input is changed - ie. an image is uploaded\n  //imgFile is the $event passed from the html file\n  uploadFileEvt(imgFile: any) {\n\n    //if the image exists\n    if (imgFile.target.files && imgFile.target.files[0]) {\n      this.fileAttr = '';\n\n      //appending the name of the file to fileAttr for display \n      Array.from(imgFile.target.files).forEach((file: any) => {\n        this.fileAttr += file.name;\n      });\n\n      // HTML5 FileReader API\n      let reader = new FileReader();\n      reader.onload = (e: any) => {\n        let image = new Image();\n        image.src = e.target.result;\n\n        //image reader onload\n        image.onload = rs => {\n          let imgBase64Path = e.target.result;\n          this.dataimage = imgBase64Path;\n        };\n\n      };\n\n      //reading as dataURL - to be called after creating a reader\n      reader.readAsDataURL(imgFile.target.files[0]);\n\n      // Reset if duplicate image uploaded again\n      this.fileInput.nativeElement.value = \"\";\n    }\n\n    //if image not found\n    else {\n      this.fileAttr = 'Choose File';\n    }\n  }\n\n  ngAfterViewInit() {\n\n    //emitting the prdictEvt event\n    this.predictEvt.emit();\n\n    //subscribing to the changes produced - button click in this case\n    this.predictEvt.subscribe(async () => {\n\n      let dialogRef = this.dialog.open(DialogPopupComponent, {\n        data: null\n      });\n\n      //ml5 function to classify the image - takes the image element and a callback function\n      await this.classifier.classify(this.previewImg.nativeElement, (error: any, results: any) => {\n        if (error) {\n          console.error(error)\n          return\n        }\n\n        //setting tha values to be transferred to the dialog \n        this.confidenceOnPrediction = (results[0].confidence * 100).toFixed(2)\n        this.labelOfPrediction = results[0].label\n\n        //if dialog reference exists, update the predictionData element which is present in the popup\n        if (dialogRef && dialogRef.componentInstance) {\n          dialogRef.componentInstance.predictionData = {\n            disease: this.labelOfPrediction.toUpperCase(),\n            confidence: this.confidenceOnPrediction\n          }\n        }\n        dialogRef.afterClosed().subscribe(result => {\n          \n        })\n\n      })\n    }, (err: Error) => console.error(err)) //log errors if any\n  }\n\n}\n","<div class=\"card\">\n    <h1 class=\"top-heading\">Upload Image</h1>\n    <div class=\"card-body d-flex justify-content-center\">\n        <mat-form-field>\n            <div>\n                <mat-toolbar>\n                    <!-- Display files names -->\n                    <input matInput [(ngModel)]=\"fileAttr\" readonly />\n\n                    <!-- Browse Button -->\n                    <button mat-flat-button>\n                        Browse File\n                    </button>\n                </mat-toolbar>\n\n                <!-- Fetch selected filed on change -->\n                <input type=\"file\" #fileInput id=\"uploadFile\" (change)=\"uploadFileEvt($event)\" name=\"uploadFile\"\n                    accept=\"image/*\" />\n            </div>\n        </mat-form-field>\n    </div>\n\n    <div class=\"card-footer\">\n        <img src=\"{{ dataimage }}\" #previewImg>\n    </div>\n\n    <div *ngIf=\"dataimage\" class=\"predict-btn-div\">\n        <!--Emitting the event on click-->\n        <button mat-flat-button color=\"primary\" (click)=\"predictEvt.emit()\">\n            Predict\n        </button>\n    </div>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}